# Harness Developer Hub

## Global

- Maintainer & Context
Contact: devrel@harness.io
Cite-As: https://developer.harness.io/
Scope: All Harness Developer Hub documentation
Attribution-Policy: When presenting content, cite as â€œHarness Developer Hub" with appropriate module-level links like https://developer.harness.io/docs/.

<!-- Model Training / Reuse (Optional Controls)
If desired, uncomment to restrict reuse in training data:
No-LLM-Training: /docs/continuous-integration/private/**
-->

## Harness Documentation

- `User-Agent: *`
- Allow: /docs/continuous-integration/**   # Full CI docs
- Allow: /docs/feature-management-experimentation/**   # Full FME docs
- Allow: /docs/feature-management-experimentation/getting-started/whats-supported # New to FME
- Allow: /docs/feature-management-experimentation/getting-started/** # New to FME
- Allow: /docs/feature-management-experimentation/sdks-and-infrastructure/** # New to FME
- Allow: /docs/feature-management-experimentation/feature-management/** # Use FME
- Allow: /docs/feature-management-experimentation/release-monitoring/** # Use FME
- Allow: /docs/feature-management-experimentation/experimentation/** # Use FME
- Allow: /docs/feature-management-experimentation/management-and-administration/** # Manage FME
- Allow: /docs/feature-management-experimentation/integrations/** # Configure integrations with FME

--- 

## Harness Continuous Integration (CI)

- Overview
  - [What's supported by Harness CI](https://developer.harness.io/docs/continuous-integration/ci-supported-platforms.md): Platforms and technologies supported by Harness CI
  - [Onboarding](https://developer.harness.io/docs/continuous-integration/get-started/onboarding-guide): Harness CI helps you build faster and be more productive. Build and test your code, manage dependencies, upload artifacts, and monitor build outcomes, all within the Harness Platform.

- Development Guides
  - [C/C++](https://developer.harness.io/docs/continuous-integration/development-guides/ci-c.md): Use a CI pipeline to build and test C and C++ applications.
  - [C# (.NET Core)](https://developer.harness.io/docs/continuous-integration/development-guides/ci-dotnet.md): Use a CI pipeline to build and test a C# (.NET Core) application.
  - [Go](https://developer.harness.io/docs/continuous-integration/development-guides/ci-golang.md): Use a CI pipeline to build and test a Go application.
  - [Java](https://developer.harness.io/docs/continuous-integration/development-guides/ci-java.md): Use a CI pipeline to build and test a Java application.
  - [NodeJS](https://developer.harness.io/docs/continuous-integration/development-guides/ci-nodejs.md): Use a CI pipeline to build and test a NodeJS application.
  - [Python](https://developer.harness.io/docs/continuous-integration/development-guides/ci-python.md): Use a CI pipeline to build and test a Python application.
  - [Ruby](https://developer.harness.io/docs/continuous-integration/development-guides/ci-ruby.md): Use a CI pipeline to build and test a Ruby application.
  - [Microsoft Windows](https://developer.harness.io/docs/continuous-integration/development-guides/ci-windows.md): Use a CI pipeline to build and test a Microsoft Windows application.
- Development Guides/Browser
  - [BrowserStack](https://developer.harness.io/docs/continuous-integration/development-guides/browser/browserstack.md): User BrowserStack in Harness CI pipelines.
- Development Guides/Build Infra
  - [Tutorial - Amazon EKS with IRSA and Harness Delegate Setup](https://developer.harness.io/docs/continuous-integration/development-guides/build-infra/aws-irsa-infra.md): Set up an Amazon Elastic Kubernetes Service (EKS) cluster with IAM Roles for Service Accounts (IRSA) for cross-account integration.
- Development Guides/Mlops
  - [Tutorial - End-to-end MLOps CI/CD pipeline with Harness and AWS](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/e2e-mlops-tutorial.md): Build and deploy an ML model using Harness and AWS.
  - [Azure ML](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-azureml.md): Use Azure ML with Harness.
  - [MLOps best practices](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-best-practices.md): MLOps best practices
  - [Databricks](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-databricks.md): Use Databricks with Harness.
  - [MLflow](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-mlflow.md): Use Mlflow with Harness.
  - [MLOps with Harness](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-overview.md): Use Harness for MLOps.
  - [AWS SageMaker](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-sagemaker.md): Use AWS SageMaker with Harness.
  - [Google Vertex AI](https://developer.harness.io/docs/continuous-integration/development-guides/mlops/mlops-vertexai.md): Use Google Vertex AI with Harness
- Development Guides/Mobile
  - [Android](https://developer.harness.io/docs/continuous-integration/development-guides/mobile/android.md): Use a CI pipeline to build and test an Android application.
  - [Tutorial - React Native and iOS pipeline](https://developer.harness.io/docs/continuous-integration/development-guides/mobile/e2e-ios-tutorial.md): Build and publish a React Native iOS app to TestFlight using Fastlane in Harness CI.
  - [iOS/macOS](https://developer.harness.io/docs/continuous-integration/development-guides/mobile/ios.md): Use a CI pipeline to build and test iOS and macOS applications.
  - [Mobile development with Harness](https://developer.harness.io/docs/continuous-integration/development-guides/mobile/mobile-dev-with-ci.md): Use Harness CI for developing mobile apps
- Development Guides/Security
  - [git revert changes from CI pipeline](https://developer.harness.io/docs/continuous-integration/development-guides/security/git-revert-from-pr.md): Revert changes introduced by a pull request based on security tests.
- Get Started
  - [Subscriptions and licenses](https://developer.harness.io/docs/continuous-integration/get-started/ci-subscription-mgmt.md): View and manage your CI subscriptions and licenses.
  - [Key concepts](https://developer.harness.io/docs/continuous-integration/get-started/key-concepts.md): Basic terminology and concepts related to CI pipelines
  - [Get Started with Harness CI](https://developer.harness.io/docs/continuous-integration/get-started/onboarding-guide.md): A self-service onboarding guide for Harness CI.
  - [Harness Continuous Integration overview](https://developer.harness.io/docs/continuous-integration/get-started/overview.md): Harness CI simplifies the code development and testing process.
  - [Try Harness CI](https://developer.harness.io/docs/continuous-integration/get-started/tutorials.md): Explore Harness CI and the features that make it four times faster than the leading competitors.
- Migration Guides
  - [Migrate from CircleCI to Harness CI](https://developer.harness.io/docs/continuous-integration/migration-guides/migrating-from-circleci.md): Learn how to migrate your existing CircleCI workflows to Harness CI.
  - [Migrate from GitHub Actions to Harness CI](https://developer.harness.io/docs/continuous-integration/migration-guides/migrating-from-githubactions.md): Learn how to migrate your existing GitHub Actions workflows to Harness CI.
  - [Migrate from GitLab CI to Harness CI](https://developer.harness.io/docs/continuous-integration/migration-guides/migrating-from-gitlab.md): Learn how to migrate your existing GitLab workflows to Harness CI.
  - [Migration utility (experimental)](https://developer.harness.io/docs/continuous-integration/migration-guides/migration-utility.md): Facilitate pipeline migration into Harness CI.
- Secure Ci
  - [Use GCP secrets in scripts](https://developer.harness.io/docs/continuous-integration/secure-ci/authenticate-gcp-key-in-run-step.md): Use base64 encoding and decoding to avoid errors with GCP secrets in Run steps.
  - [Configure OIDC with GCP WIF for Harness Cloud](https://developer.harness.io/docs/continuous-integration/secure-ci/configure-oidc-gcp-wif-ci-hosted.md): Configure OIDC with GCP WIF for builds on Harness Cloud.
  - [Generate GCP access tokens from OIDC tokens](https://developer.harness.io/docs/continuous-integration/secure-ci/gcp-oidc-token-plugin.md): Use a plugin to publish Helm charts to Docker registries
  - [Secure Connect for Harness Cloud](https://developer.harness.io/docs/continuous-integration/secure-ci/secure-connect.md): Private networking with Harness-managed runners.
  - [Security hardening for Harness CI](https://developer.harness.io/docs/continuous-integration/secure-ci/security-hardening.md): Best practices and features to help you build securely with Harness CI.
- Troubleshoot Ci
  - [Troubleshoot builds with AIDA](https://developer.harness.io/docs/continuous-integration/troubleshoot-ci/aida.md): AIDA is the Harness AI Development Assistant.
  - [CI environment variables reference](https://developer.harness.io/docs/continuous-integration/troubleshoot-ci/ci-env-var.md): Learn about environment variables in Harness CI pipelines.
  - [Debug with SSH](https://developer.harness.io/docs/continuous-integration/troubleshoot-ci/debug-mode.md): Use debug mode to troubleshoot remote builds
  - [Optimize Windows VM Runner](https://developer.harness.io/docs/continuous-integration/troubleshoot-ci/optimize-windows-vm-runner.md): Optimizing Self-Hosted Windows VM Runner for Faster Startup and Response Times.
  - [Troubleshoot CI](https://developer.harness.io/docs/continuous-integration/troubleshoot-ci/troubleshooting-ci.md): Harness CI troubleshooting tool, guidance, and FAQs.
- Use Ci
  - [Harness CI Intelligence](https://developer.harness.io/docs/continuous-integration/use-ci/harness-ci-intelligence.md): Harness CI Intelligence leverages a suite of CI features to optimize your builds.
  - [CI pipeline creation overview](https://developer.harness.io/docs/continuous-integration/use-ci/prep-ci-pipeline-components.md): An overview of CI pipeline components and Build stage settings
  - [Use CI Run steps](https://developer.harness.io/docs/continuous-integration/use-ci/run-step-settings.md): This topic describes settings for the CI Run step.
  - [View builds](https://developer.harness.io/docs/continuous-integration/use-ci/viewing-builds.md): You can inspect past builds and monitor ongoing builds.
- Use Ci/Build And Upload Artifacts
  - [Publish anything to the Artifacts tab](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/artifacts-tab.md): You can publish any URL to the Artifacts tab.
  - [How to Build and push with non-root users](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push-nonroot.md): Use the buildah plugin if you can't use the built-in Build and Push steps.
  - [Build and push artifacts and images](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-upload-an-artifact.md): There are many ways you can use Harness CI to upload artifacts.
  - [Build Intelligence Overview](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-intelligence.md): Learn about the Build Intelligence in Harness CI.
  - [Build multi-architecture images](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-multi-arch.md): You can build multi-architecture images in a CI pipeline.
  - [Build-only and Push-only Options for Docker Images](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-without-push.md): You can build images without pushing them Or push a pre-built image without building.
  - [Export artifacts by email](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/drone-email-plugin.md): Use the Email plugin to export reports and other artifacts by email.
  - [Copy images across registries](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/migrate-images.md): Use a plugin to copy an image from one registry to another.
- Use Ci/Build And Upload Artifacts/Build And Push
  - [Build and Push to ACR](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-acr.md): Use a CI pipeline to build and push an image to ACR.
  - [Build and Push to JFrog Docker registries](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-docker-jfrog.md): Use a CI pipeline to build and push an image to a JFrog Docker registry.
  - [Build and Push to Docker](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-docker-registry.md): Use a CI pipeline to build and push an image to a Docker registry.
  - [Build and Push to ECR](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-ecr-step-settings.md): Learn how to use the Build and Push to ECR step.
  - [Build and Push to GAR](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-gar.md): Use a CI pipeline to build and push an image to GAR.
  - [Build and Push to GHCR](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/build-and-push/build-and-push-to-ghcr.md): Use a CI pipeline to build and push an image to GitHub Container Registry.
- Use Ci/Build And Upload Artifacts/Upload Artifacts
  - [Upload Artifacts to GCS](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-artifacts-to-gcs-step-settings.md): Add a step to upload artifacts to Google Cloud Storage.
  - [Upload Artifacts to JFrog](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-artifacts-to-jfrog.md): Add a step to upload artifacts to JFrog.
  - [Upload Artifacts to S3](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-artifacts-to-s3.md): Upload artifacts to AWS or other S3 providers such as MinIo.
  - [Upload artifacts to Sonatype Nexus](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-artifacts-to-sonatype-nexus.md): You can use Harness CI to upload artifacts to Sonatype Nexus Repository Manager.
  - [Build, Package and Push .NET packages](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-dotnet-to-azure-artifacts.md): Add steps to build and package a .NET application and then push the package to Azure Artifacts using Harness CI pipelines.
  - [Upload Helm charts to container registries](https://developer.harness.io/docs/continuous-integration/use-ci/build-and-upload-artifacts/upload-artifacts/upload-helm-chart.md): Use a plugin to publish Helm charts to Docker registries
- Use Ci/Caching Ci Data
  - [Cache Intelligence](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/cache-intelligence.md): Caching dependencies can improve build times.
  - [Docker layer caching](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/docker-layer-caching.md): Caching Docker layers between pipeline executions can reduce build times.
  - [Multilayer caching](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/multilayer-caching.md): Use multiple Save and Restore Cache steps to achieve multilayer caching.
  - [Confirm cache before installing dependencies](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/run-if-no-cache.md): Use conditional executions to run steps only if the cache wasn't restored.
  - [Save and Restore Cache from Azure](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/save-cache-azure.md): Caching improves build times and enables you to share data across stages.
  - [Save and Restore Cache from GCS](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/save-cache-in-gcs.md): Caching improves build times and enables you to share data across stages.
  - [Save and Restore Cache from S3](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/saving-cache.md): Caching enables sharing data across stages
  - [Share CI data across steps and stages](https://developer.harness.io/docs/continuous-integration/use-ci/caching-ci-data/share-ci-data-across-steps-and-stages.md): This topic describes how you can share CI data across steps and stages.
- Use Ci/Codebase Configuration
  - [CI codebase variables reference](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/built-in-cie-codebase-variables-reference.md): Use Harness' built-in expressions to reference various Git codebase attributes in pipeline stages.
  - [Clone multiple code repos in one pipeline](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/clone-and-process-multiple-codebases-in-the-same-pipeline.md): Use Git Clone steps to clone additional code repos into a pipeline's workspace.
  - [Clone a subdirectory](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/clone-subdirectory.md): Use a Run step to clone a subdirectory instead of an entire repo.
  - [Configure codebase](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/create-and-configure-a-codebase.md): CI pipelines build and test code that is pulled from Git code repositories.
  - [Git Clone step in CI](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/git-clone-step.md): Clone a repository into the CI stage's workspace.
  - [git revert from a CI pipeline](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/git-revert-commit.md): Use a run step to revert git commit(s).
  - [SCM status checks](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/scm-status-checks.md): Configure branch protection and status checks for codebases associated with Harness CI.
- Use Ci/Codebase Configuration/Static
  - [Git Large File Storage](https://developer.harness.io/docs/continuous-integration/use-ci/codebase-configuration/static/gitlfs.md): Use Run steps to install Git LFS and run git lfs commands.
- Use Ci/Manage Dependencies
  - [Background step settings](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/background-step-settings.md): Use Background steps to manage dependent services.
  - [Run a LocalStack service](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/ci-localstack-background-step.md): Run LocalStack in a Background step in a Build stage.
  - [Run a Sauce Connect Proxy service](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/ci-saucelabs-background-step.md): Run Sauce Connect Proxy in a Background step in a Build stage.
  - [Dependency management strategies](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/dependency-mgmt-strategies.md): Learn how you can manage dependencies in Harness CI pipelines.
  - [Run health checks on background services](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/health-check-services.md): Use step groups to run health checks on separate background services.
  - [Run multiple PostgreSQL instances in Background steps](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/multiple-postgres.md): Use Background steps to run multiple PostgreSQL instances.
  - [Run Docker-in-Docker in a Build stage](https://developer.harness.io/docs/continuous-integration/use-ci/manage-dependencies/run-docker-in-docker-in-a-ci-stage.md): You can run Docker-in-Docker as a Background step in a Build stage.
- Use Ci/Run Tests
  - [Tutorial - Test a FastAPI project](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/ci-fastapi-test.md): Use Harness CI to automatically test a FastAPI project.
  - [Code coverage](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/code-coverage.md): Include code coverage in your CI pipelines.
  - [Flaky Tests](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/flaky-tests.md): Use Test Analysis Plugin to manage flaky tests
  - [Run tests in CI pipelines](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/run-tests-in-ci.md): Use Run and Test steps to run tests in CI pipelines.
  - [Split tests in Run steps](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/speed-up-ci-test-pipelines-using-parallelism.md): Split tests for any language. Use parallelism to improve test times.
  - [Format test reports](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/test-report-ref.md): Test reports must be in JUnit XML format to appear on the Tests tab.
  - [Test Intelligenceâ„¢ step](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v2.md): Use the Test step to leverage Test Intelligence.
  - [Test Intelligenceâ„¢ overview](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/ti-overview.md): Reduce unit test time by running only relevant unit tests.
  - [View tests](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/viewing-tests.md): View the results from CI tests.
- Use Ci/Run Tests/Tests V1
  - [Use Run Tests step for C#](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v1/ti-for-csharp.md): Set up TI for C# applications with .NET Core or NUnit.
  - [Use Run Tests step for Java, Kotlin, or Scala](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v1/ti-for-java-kotlin-scala.md): Set up TI for Java, Kotlin, or Scala programming languages.
  - [Use Run Tests step for Python](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v1/ti-for-python.md): Set up TI for Python codebases.
  - [Use the Run Tests step for Ruby](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v1/ti-for-ruby.md): Set up TI for Ruby programming language.
  - [Enable parallelism on a Run Tests step](https://developer.harness.io/docs/continuous-integration/use-ci/run-tests/tests-v1/ti-test-splitting.md): You can enable parallelism on a Run Tests step.
- Use Ci/Set Up Build Infrastructure
  - [CI Build stage settings](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/ci-stage-settings.md): This topic describes CI Build stage settings.
  - [Set up a local runner build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/define-a-docker-build-infrastructure.md): You can define a CI build infrastructure on any Linux or macOS host.
  - [Harness CI images](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/harness-ci.md): When you run a Harness CI build, the pipeline pulls the Harness CI images it needs from Docker Hub.
  - [Install Harness Delegate 2.0 (Closed Beta)](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/install-delegate-2-0.md): Learn how to install Harness Delegate 2.0 for local machines
  - [Pre-built public images](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/public-docker-images.md): These images are loaded with helpful libraries for CI pipelines.
  - [Resource allocation](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/resource-limits.md): Learn about container resource allocation logic and troubleshooting.
  - [Use Harness Cloud build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/use-harness-cloud-build-infrastructure.md): You can use Harness-managed build infrastructure for your Harness CI pipelines.
  - [Which build infrastructure is right for me](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/which-build-infrastructure-is-right-for-me.md): Compare Harness-managed and self-managed CI build infrastructure options.
- Use Ci/Set Up Build Infrastructure/K8S Build Infrastructure
  - [Configure a Kubernetes build farm to use self-signed certificates](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/k8s-build-infrastructure/configure-a-kubernetes-build-farm-to-use-self-signed-certificates.md): CI build pods can interact with servers using self-signed certificates.
  - [Run Windows builds in a Kubernetes build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/k8s-build-infrastructure/run-windows-builds-in-a-kubernetes-build-infrastructure.md): You can run Windows builds in your Kubernetes build infrastructure.
  - [Set up a Kubernetes cluster build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/k8s-build-infrastructure/set-up-a-kubernetes-cluster-build-infrastructure.md): You can use a Kubernetes cluster build infrastructure for a Harness CI pipeline.
  - [Tutorial - Build and test on a Kubernetes cluster](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/k8s-build-infrastructure/tutorial-ci-kubernetes-build-infra.md): Learn how to create a pipeline that uses a Kubernetes cluster build infrastructure.
- Use Ci/Set Up Build Infrastructure/Vm Build Infrastructure
  - [Set up a Microsoft Azure VM build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/define-a-ci-build-infrastructure-in-azure.md): Set up a CI build infrastructure in Microsoft Azure.
  - [Set up a GCP VM build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/define-a-ci-build-infrastructure-in-google-cloud-platform.md): This topic describes how to set up a CI build infrastructure in Google Cloud Platform.
  - [Set up a macOS VM build infrastructure with Anka Registry](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/define-macos-build-infra-with-anka-registry.md): Set up a Harness macOS build farm that uses an Anka registry and controller.
  - [High Availability (HA)](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/high-availability.md): Set up high availability on VM build infrastructure.
  - [Set up an AWS VM build infrastructure](https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/set-up-an-aws-vm-build-infrastructure.md): Set up a CI build infrastructure using AWS VMs.
- Use Ci/Use Drone Plugins
  - [Use the Bitrise step](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/ci-bitrise-plugin.md): Use Bitrise Workflow Steps in your Harness CI pipelines.
  - [Use the GitHub Action step](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/ci-github-action-step.md): Run GitHub Actions in your Harness CI pipelines.
  - [Integrate Jira in a CI pipeline](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/ci-jira-int-plugin.md): Connect your Harness CI pipelines to Jira.
  - [Write custom plugins](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/custom_plugins.md): You can write your own plugins.
  - [Explore plugins](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/explore-ci-plugins.md): Learn how, why, and when to use plugins
  - [Plugin step settings](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/plugin-step-settings-reference.md): Plugins perform predefined tasks.
  - [Use Drone plugins](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/run-a-drone-plugin-in-ci.md): Drone plugins are Docker containers that perform predefined tasks.
  - [Use the GitHub Actions Drone plugin](https://developer.harness.io/docs/continuous-integration/use-ci/use-drone-plugins/run-a-git-hub-action-in-cie.md): Run GitHub Actions in your Harness CI pipelines.

## Feature Management & Experimentation

- Overview
  - [Getting Started](https://developer.harness.io/docs/feature-management-experimentation/getting-started/) # Overview of FME
  - [What's Supported](https://developer.harness.io/docs/feature-management-experimentation/getting-started/whats-supported) # What's supported in FME
  - [Key Concepts](https://developer.harness.io/docs/feature-management-experimentation/getting-started/key-concepts) # Key concepts in FME 

- SDKs & Infrastructure
  - [SDKs and Infrastructure Overview](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/sdk-overview/): An overview of supported SDKs and customer-deployed components for FME.
  - [Versioning policy for SDKs and customer-deployed components](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/sdk-overview/versioning-policy-for-sdks-and-customer-deployed-components): An overview of FME's versioning policy for supported SDKs and customer-deployed components.
  - [SDK validation checklist](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/sdk-overview/sdk-validation-checklist): A checklist to help users ensure that Harness SDKs are implemented correctly.
  - [Troubleshooting](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/sdk-overview/troubleshooting): Troubleshooting information about supported SDKs and customer-deployed components for FME.
  - [Android SDK Suite](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-SDK suites/android-SDK suite): This topic provides detailed information about the FME Android Suite.
  - [Browser SDK Suite](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-suites/browser-suite): This topic provides detailed information about the FME Browser Suite.
  - [iOS SDK Suite](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-suites/ios-suite): This topic provides detailed information about the FME iOS Suite.
  - [Android SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/android-sdk): This topic provides detailed information about the FME Android SDK.
  - [Angular utilities](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/angular-utilities): This topic provides detailed information about the FME Angular utilities.
  - [Browser SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/browser-sdk): This topic provides detailed information about the FME Browser SDK.
  - [Flutter plugin](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/flutter-plugin): This topic provides detailed information about the FME Flutter plugin.
  - [iOS SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/ios-sdk): This topic provides detailed information about the FME iOS SDK.
  - [JavaScript SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/javascript-sdk): This topic provides detailed information about the FME JavaScript SDK.
  - [React Native SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/react-native-sdk): This topic provides detailed information about the FME React Native SDK.
  - [React SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/react-sdk): This topic provides detailed information about the FME React SDK.
  - [Redux SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdks/redux-sdk): This topic provides detailed information about the FME Redux SDK. 
  - [React Native app using FME Node.js SDK example](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdk-examples/react-native-app-nodejs): This topic provides an example React Native application project which uses the FME JavaScript SDK.
  - [Node.js with React Redux project using FME JavaScript SDK example](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-sdk-examples/nodejs-with-react-redux-using-javascript-sdk): This topic provides an example React Redux project which uses the FME JavaScript SDK.
  - [Android RUM Agent](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-agents/android-rum-agent): This topic provides detailed information about the FME Real User Monitoring Agent for Android applications.
  - [Browser RUM Agent](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-agents/browser-rum-agent): This topic provides detailed information about the FME Real User Monitoring Agent for browser applications.
  - [iOS RUM Agent](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/client-side-agents/ios-rum-agent): This topic provides detailed information about the FME Real User Monitoring Agent for iOS applications.
  - [Elixir Thin Client SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/elixir-thin-client-sdk): This topic provides detailed information about the FME Exilir Thin Client SDK.
  - [Go SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/go-sdk): This topic provides detailed information about the FME Go SDK.
  - [Java SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/java-sdk): This topic provides detailed information about the FME Java SDK.
  - [.NET SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/net-sdk): This topic provides detailed information about the FME .NET SDK.
  - [Node.js SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/nodejs-sdk): This topic provides detailed information about the FME Node.js SDK.
  - [PHP SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/php-sdk): This topic provides detailed information about the FME PHP SDK.
  - [PHP Thin Client SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/php-thin-client-sdk): This topic provides detailed information about the FME PHP Thin Client SDK.
  - [Python SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/python-sdk): This topic provides detailed information about the FME Python SDK.
  - [Ruby SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdks/ruby-sdk): This topic provides detailed information about the FME Ruby SDK.
  - [.NET Core VB using FME SDK example](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdk-examples/net-core-vb): This topic provides an example .NET Core Virtual Basic project which uses the FME .NET SDK.
  - [Ruby SDK and Rails caching](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/server-side-sdk-examples/ruby-sdk-rails-caching): This topic provides an example Ruby on Rails application project which uses the FME Ruby SDK and works with full page caching.
  - [Split Daemon (splitd)](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/optional-infra/split-daemon-splitd): This topic provides detailed information about the Split Daemon (splitd).
  - [Split Evaluator](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/optional-infra/split-evaluator): This topic provides detailed information about the Split Evaluator.
  - [Split Proxy](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/optional-infra/split-proxy): This topic provides detailed information about the Split Proxy.
  - [Split Synchronizer](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/optional-infra/split-synchronizer): This topic provides detailed information about the Split Synchronizer.
  - [Split JavaScript synchronizer tools](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/optional-infra/split-javascript-synchronizer-tools): This topic provides detailed information about Split JavaScript Synchronizer tools.
  - [Moving feature flags to a service](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/best-practices/moving-feature-flags-to-a-service): This topic provides best practices on using a service for feature flags.
  - [Split Synchronizer runbook](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/best-practices/split-sync-runbook): This topic provides best practices on running a Split Synchronizer.
  - [Server-side and client-side SDK API key usage](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/best-practices/server-side-and-client-side-api-key-usage): This topic provides best practices on using API keys with FME server-side and client-side SDKs.
  - [Block traffic until the SDK is ready](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/best-practices/block-traffic-until-the-sdk-is-ready): This topic provides best practices on blocking traffic until the FME SDK is ready.
  - [Configure Split Synchronizer to handle high impression rate](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/best-practices/configure-fme-synchronizer-to-handle-high-impression-rate): This topic provides best practices on configuring the Split Synchronizer to handle high impression rate.
  - [Isomorphic JavaScript wrapper example](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/isomorphic-javascript-wrapper-example/): This topic provides an example JavaScript wrapper project which uses the FME JavaScript SDK and evaluates flags on both server and client sides.
  - [SDK readiness always times out when running in Kubernetes and Istio proxy](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/sdk-readiness-always-times-out-when-running-in-kubernetes-and-istio-proxy/): This topic provides best practices on running an application that uses the FME SDK in a Kubernetes container that is configured to use the Istio proxy.
  - [How to use FME SDKs with Split Proxy?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/how-to-use-split-sdks-with-split-proxy/): This topic provides detailed information on using the FME SDKs with the Split Proxy.
  - [Is it possible to call getTreatment() function without passing a user ID?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/is-it-possible-to-call-getthreatment-function-without-passing-a-user-id/): This topic provides detailed information on calling the `getTreatment` function without passing an evaluation key. 
  - [Is it possible to use Postman to calculate a treatment for a given feature flag?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/is-it-possible-to-use-postman-to-calculate-a-treatment-for-a-feature-flag/): This topic provides detailed information on using the Split Evaluator to calculate treatments for a feature flag with Postman.
  - [Split Manager returns incomplete list of feature flags](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/split-manager-returns-incomplete-list-of-feature-flags/): This topic provides detailed information on using the SDK Factory Manager object to fetch a list of information about feature flags. 
  - [How to ensure SDK is configured to handle the generated impressions and events load?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/how-to-ensure-sdk-is-configured-to-handle-the-generated-impressions-and-events-load/): This topic provides detailed information on ensuring the FME SDK is configured to handle generated impressions and event loads.
  - [SDK never gets ready, regardless of the ready timeout value](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/sdk-never-gets-ready-regardless-of-the-ready-timeout-value/): This topic provides detailed information on ensuring the FME SDK gets ready, regardless of how much the ready timeout value is.
  - [Always getting control treatments](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/always-getting-control-treatments/): This topic provides detailed information on using the FME SDK so that control treatments are not always returned from the `getTreatment` call.  
  - [How do I find out what changed in an SDK?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/how-do-i-find-out-what-changed-in-an-sdk/): This topic provides detailed information on staying up to date on the FME SDKs latest changes and releases.
  - [Why are impressions not showing in Harness FME?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/why-are-impressions-not-showing-in-split/): This topic provides detailed information on ensuring that impressions appear in Harness FME.
  - [Why is the SDK making hundreds of network calls without using getTreatment or track methods?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/why-is-the-sdk-making-hundreds-of-network-calls-without-using-gettreatment-or-track-methods/): This topic provides detailed information on ensuring that any FME SDK library does not make hundreds of network calls without using the `getTreatment` or track methods.
  - [General SDK error, getTreatment: you passed "SPLIT NAME" that does not exist in this environment](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-general-sdk/error-gettreatment-you-passed-split-name-that-does-not-exist-in-this-environment/): This topic provides detailed information on ensuring the does not exist in this environment error does not appear when using an FME SDK and calling the `getTreatment` method for a list of feature flag names.
  - [Redux SDK: Control treatment returned when SDK is initialized](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/redux-sdk-control-treatment-returned-when-sdk-is-initialized/): This topic provides detailed information on implementing the FME Redux SDK using the isReady prop so that the correct treatment is guaranteed.
  - [JavaScript SDK: Localhost mode does not support Allowlist keys](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-localhost-mode-does-not-support-allowlist-keys/): This topic provides detailed information on using the FME JavaScript, React, Redux, and Browser SDKs to support allowlist keys in localhost mode.
  - [isTimeout prop not returning true when React SDK times out](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/react-sdk-istimeout-prop-not-returning-true-when-react-sdk-times-out/): This topic provides detailed information on using the FME React SDK and checking if the SDK has timed out within a specific timeout before it finishes downloading the cache and signaling that it's ready. 
  - [JavaScript SDK: CORS Error in streaming call when running SDK in Service Worker](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-cors-error-in-streaming-call-when-running-sdk-in-service-worker/): This topic provides detailed information on using the FME JavaScript SDK inside the Service Worker and ensuring that the SDK streaming HTTP call is not blocked by a CORS browser policy.
  - [React SDK: Is it possible to get treatments outside the components?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/react-sdk-is-it-possible-to-get-treatments-outside-the-components/): This topic provides detailed information on using the FME React SDK to get feature flag treatments through JavaScript code while using React SDK components.
  - [Browser SDK migration guide](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/browser-sdk-migration-guide/): This topic provides detailed information on migrating from FME JavaScript SDK v10.15.x to Browser SDK v0.1.x.
  - [Mobile and web SDK: FME changes roll out slowly to user devices](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/ios-android-browser-sdk-fme-changes-roll-out-slowly-to-user-devices/): This topic provides detailed information on ensuring that FME SDK changes don't propagate slowly to user devices.
  - [Mobile and web SDK: Does the SDK cache expire?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/ios-android-browser-sdk-does-the-sdk-cache-expire/): This topic provides detailed information on the default cache expiration period for mobile and browser SDKs.
  - [JavaScript SDK: Does SDK_READY event fire only once?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-does-sdk-ready-event-fire-only-once/): This topic provides detailed information on ensuring that the FME JavaScript SDK executes code correctly.
  - [Calling client.Destroy does not post impressions in Android SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-calling-client-destroy-does-not-post-impressions/): This topic provides detailed information on using the FME Android SDK and ensuring that calling client.Destroy() clears the SDK cache and posts all impressions.
  - [React SDK: Error building app with webpack "Entrypoint undefined = ng/index.html"](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/react-sdk-error-building-app-with-webpack/): This topic provides detailed information on ensuring that a React application does not fail to build when using Webpack after installing the FME React SDK.
  - [React SDK: Lazy initialization of SDK client](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/react-sdk-lazy-initialization-of-split-client/): This topic provides detailed information on using lazy initialization of the FME React SDK client.
  - [iOS SDK runtime error: JFBCrypt.m left shift of [x] by [y] places cannot be represented in type 'SInt32'](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/ios-sdk-runtime-error-jfbcrypt-m-left-shift-of-x-by-y-places/): This topic provides detailed information on ensuring that runtime errors don't appear when using an Objective-C project with the FME iOS SDK.
  - [How to deploy JavaScript SDK to a Wordpress site?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-how-to-deploy-javascript-sdk-to-a-wordpress-site/): This topic provides detailed information on deploying JavaScript code in a WordPress site.
  - [Android SDK: Duplicate class FinalizableReferenceQueue$DirectLoader in modules checkstyle-5.3-all.jar and guava-18.0.jar](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-duplicate-class-finalizablereferencequeue/): This topic provides detailed information on ensuring that when compiling an application with the FME Android SDK, a `duplicate class` error does not appear.
  - [Android SDK: SDK takes too long to get ready](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-sdk-takes-too-long-to-get-ready/): This topic provides detailed information on ensuring that the FME Android SDK does not take too long to get ready.
  - [Android SDK: Using Kotlin, SDK always returns the control treatment](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-using-kotlin-sdk-always-returns-control-treatment/): This topic provides detailed information on ensuring that an Android application that uses Kotlin does not always return the control treatment from the FME Android SDK.
  - [HTTP Exception: Chain validation failed](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-http-exception-chain-validation-failed/): This topic provides detailed information on ensuring that chain validation passes when running an Android application in Emulator using the FME Android SDK.
  - [Mobile SDK: How to initialize for multiple user IDs?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/ios-and-android-sdk-how-to-initialize-for-multiple-user-ids/): This topic provides detailed information on initializing mobile SDKs for multiple user IDs or evaluation keys.
  - [JavaScript SDK Error: "Shared Client not supported by the storage mechanism. Create isolated instances instead"](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-error-shared-client-not-supported-by-the-storage-mechanism/): This topic provides detailed information on ensuring that the `Shared Client not supported by the storage mechanism` error does not appear when testing the FME JavaScript SDK's browser mode using Jest.
  - [JavaScript SDK: How to enable Content Security Policy (CSP) to work with JavaScript SDK](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-how-to-enable-conent-security-policy/): This topic provides detailed information on enabling the Content Security Policy to work with the FME JavaScript SDK.
  - [Mobile SDK: When using client.on method, the code block is never called](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-ios-javascript-sdk-client-on-never-runs/): This topic provides detailed information on ensuring that the client.on method is called when using FME JavaScript browser, Android, or iOS SDKs. 
  - [Android SDK: Does the SDK use SharedPreferences on the device to store the FME cache?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/android-sdk-does-the-sdk-use-sharedpreferences/): This topic provides detailed information on how the FME Android SDK stores the FME cache.
  - [Running bundle using React Native and JavaScript SDK causes an error. Bundling failed: Error: Unable to resolve module `util`](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-react-native/): This topic provides detailed information on ensuring that that the Bundling failed error does not appear when running a bundle using React Native and the FME JavaScript SDK.
  - [Building JavaScript SDK using polymer-cli causes error: ENOENT: no such file or directory](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-polimer-cli-enoent-error/): This topic provides detailed information on ensuring that the ENOENT error does not appear when building the FME JavaScript SDK using polymer-cli.
  - [Why does the JavaScript SDK return Not Ready status in slow networks?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-not-ready-status-in-slow-networks/): This topic provides detailed information on using the FME JavaScript SDK in browser mode and ensuring that the SDK status returns Ready on a slow network.
  - [Is the iOS SDK Split library missing the track method?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/ios-sdk-missing-track-method/): This topic provides detailed information on ensuring that the Value of type SplitClientProtocol error does not appear when using the FME iOS SDK in an XCode project.
  - [Why does the JavaScript URL "https://sdk.split.io/api/mySegments/" return HTTP 404 error?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-client-side-sdks/javascript-sdk-mysegments-endpoint/): This topic provides detailed information on ensuring that the FME JavaScript SDK does not generate an HTTP 404 error.
  - [Node.js SDK: Dependency on old version of package url-parse](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/nodejs-sdk-dependency-on-old-version-of-package-url-parse/): This topic provides detailed information on upgrading the package url-parse version for the FME Node.js SDK.
  - [Ruby SDK: Example using FME SDK with Rails and Sidekiq service](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/ruby-sdk-example-using-sdk-with-rails-and-sidekiq-service/): This topic provides an example of using the FME Ruby SDK in Rails and a Sidekiq service.
  - [Node.js SDK: Using getTreatment() in localhost mode, does not work with then() and catch() blocks](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/nodejs-sdk-using-gettreatment-in-localhost-mode-does-not-work-with-then-and-catch-blocks/): This topic provides detailed information on ensuring that the `getTreatment` method in localhost mode works with `then()` and `catch()` blocks.
  - [Node.js SDK: While using Localhost mode, error generated: Cannot find name 'path'](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/nodejs-sdk-localhost-mode-error-cannot-find-name-path/): This topic provides detailed information on ensuring the Cannot find name path error does not appear when using the FME Node.js SDK in a TypeScript file using Localhost mode.
  - [Node.js SDK error: "/node_modules/@splitsoftware/splitio/types"' has no exported member 'SplitIO'](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/nodejs-sdk-error-node-modules-has-no-exported-member-splitio/): This topic provides detailed information on ensuring the /node_modules/ error does not appear when using the FME Node.js SDK and it is trying to import SplitIO as a namespace in TypeScript.
  - [GO SDK Error flushing storage queue couldn't send message to task SubmitImpressions](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/go-sdk-error-flushing-storage-queue/): This topic provides detailed information on ensuring the FME Go SDK flushes all impressions.
  - [How to deploy Node.js SDK in AWS Lambda](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/nodejs-sdk-how-to-deploy-in-aws-lambda/): This topic provides detailed information on deploying FME Node.js SDK code in an AWS Lambda service.
  - [How to deploy Java SDK in AWS Lambda](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-how-to-deploy-in-aws-lambda/): This topic provides detailed information on deploying FME Java SDK code in an AWS Lambda service.
  - [Is there a JAR file for Java SDK?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-is-there-a-jar-file/): This topic provides detailed information on how the FME Java SDK uses a Maven repository.
  - [Java SDK Time out Error: NoSuchMethodError: com.google.common.collect.Multisets.removeOccurrences](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-time-out-error-nosuchmethoderror-google-common/): This topic provides detailed information on ensuring that the FME Java SDK does not time out within a framework.
  - [Java SDK how to change log level](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-how-to-change-log-level/): This topic provides detailed information on changing the log level when integrating the FME Java SDK into a framework that uses Log4J.
  - [Java SDK error using JRE 6.x "fatal alert: handshake_failure"](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-fatal-alert-handshake-failure/): This topic provides detailed information on ensuring the Received fatal alert error does not appear when using the FME Java SDK and JDK 1.6 (or JRE 6.x).
  - [Which API Key to use with .NET Xamarin project?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/net-xamarin-which-api-key/): This topic provides best practices for developing a Xamarin project when using the FME .NET or .NET Core SDK.
  - [Ruby SDK Error: uninitialized constant error caused by 'Process::RLIMIT_NOFILE' in lib/net/http/persistent.rb](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/ruby-sdk-error-uninitialized-constant/): This topic provides detailed information on ensuring the uninitialized constant error does not appear when using the FME Ruby SDK in the Windows Platform.
  - [Java SDK Exception: PKIX path building failed: unable to find valid certification path to requested target](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/java-sdk-exception-pkix-path-building-failed/): This topic provides detailed information on ensuring the unable to find valid certification path to requested target error does not appear when implementing the FME Java SDK.
  - [Ruby SDK: Upgrading from 4.x to 5.x and above](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/ruby-sdk-upgrading-from-4-to-5-plus/): This topic provides best practices for upgrading versions of the FME Ruby SDK.
  - [Ruby SDK: Why do CLOSE_WAIT TCP connections in Puma not go down as expected?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/ruby-sdk-close-wait-tcp-connections-in-puma/): This topic provides detailed information on using the FME Ruby SDK in Puma or Unicorn cluster mode.
  - [What is the Python SDK error: "type() argument 1 must be string, not unicode"?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/python-sdk-error-type-argument-1-must-be-string/): This topic provides detailed information on ensuring the type() argument 1 must be string, not unicode error does not appear when initializing the FME Python SDK Factory object in Python.
  - [Why do I see .NET SDK Build error "Split 3.4.2.0 cannot be loaded since it needs a strongly-named assembly"?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/net-sdk-build-error-strongly-named-assembly/): This topic provides detailed information on ensuring that a .NET project that has signing enabled builds successfully after adding the FME .NET SDK.
  - [Why is PHP unable to write impressions to Redis throwing error "NOAUTH Authentication required"?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-server-side-sdks/php-sdk-why-is-php-unable-to-write-impressions-to-redis/): This topic provides detailed information on ensuring that the NOAUTH Authentication required error does not appear when using the FME PHP SDK to write impressions to Redus.
  - [Running Split Evaluator, Split Proxy, or Split Synchronizer with Kubernetes](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/running-evaluator-proxy-synchronizer-k8/): This topic provides detailed information on running the Split Evaluator, Split Proxy, and Split Synchronizer with Kubernetes.
  - [Synchronizer returns 500 HTTP error when used in proxy mode](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/http-error-when-using-proxy-mode/): This topic provides detailed information on ensuring that the Split Synchronizer does not return a 500 HTTP error when used in proxy mode.
  - [How to inject a certificate into a Synchronizer Docker image?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/how-to-inject-a-certificate-into-a-synchronizer-docker-image/): This topic provides detailed information on injecting a certificate into a Synchronizer Docker image.
  - [How to deploy Synchronizer Docker container in Heroku?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/how-to-deploy-synchronizer-docker-container-in-heroku/): This topic provides detailed information on deploying the Synchronizer Docker container in a Heroku environment.
  - [How to deploy Synchronizer Docker container in Amazon AWS?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/how-to-deploy-fme-synchronizer-docker-container-in-aws/): This topic provides detailed information on deploying the Synchronizer Docker container in an AWS ECS service.
  - [Using FME SDK with Synchronizer docker, getTreatment is always returning 'control'](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/using-sdk-sync-gettreatment-control/): This topic provides detailed information on ensuring that the `getTreatment` call does not always return `control` after installing the Split Synchronizer Docker instance and running it successfully with a Redis instance.
  - [No Impressions sent from Python SDK 7.x and Synchronizer 1.x](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/no-impressions-sent-from-python-sdk-7/): This topic provides detailed information on ensuring impressions are sent from the FME Python SDK version 7.x and the Split Synchronizer version 1.x.
  - [Synchronizer compatibility matrix](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/sync-compatibility-matrix/): This topic provides detailed information on the compatibility of the Split Synchronizer with FME SDKs.
  - [Why do I see a "POST method: Status Code: 404 - 404 Not Found" Synchronizer error?](https://developer.harness.io/docs/feature-management-experimentation/sdks-and-infrastructure/faqs-optional-infra/post-method-404/): This topic provides detailed information on ensuring a POST Method error does not appear after starting the Split Synchronizer process.

- Feature Management
  - [Create a feature flag](https://developer.harness.io/docs/feature-management-experimentation/feature-management/create-a-feature-flag): This topic provides detailed information on creating a feature flag.
  - [Using essential scheduling](https://developer.harness.io/docs/feature-management-experimentation/feature-management/using-essential-scheduling/): This topic provides detailed information on using feature flag scheduling.
  - [Define feature flag treatments and targeting](https://developer.harness.io/docs/feature-management-experimentation/feature-management/define-feature-flag-treatments-and-targeting/): This topic provides detailed information on defining feature flag treatments.
  - [Edit treatments](https://developer.harness.io/docs/feature-management-experimentation/feature-management/edit-treatments/): This topic provides detailed information on editing treatments.
  - [Dynamic configuration](https://developer.harness.io/docs/feature-management-experimentation/feature-management/dynamic-configurations/): This topic provides detailed information on attaching dynamic dynamic configurations on treatments.
  - [Create a segment](https://developer.harness.io/docs/feature-management-experimentation/feature-management/segments/): This topic provides detailed information on creating segments.
  - [Target segments](https://developer.harness.io/docs/feature-management-experimentation/feature-management/target-segments/): This topic provides detailed information on targeting segments.
  - [Limiting exposure](https://developer.harness.io/docs/feature-management-experimentation/feature-management/limiting-exposure/): This topic provides detailed information on limiting exposure of feature flags.
  - [Target with custom attributes](https://developer.harness.io/docs/feature-management-experimentation/feature-management/target-with-custom-attributes/): This topic provides detailed information on targeting with custom attributes.
  - [Target with dependencies](https://developer.harness.io/docs/feature-management-experimentation/feature-management/target-with-dependencies/): This topic provides detailed information on targeting with dependencies.
  - [Set the default treatment](https://developer.harness.io/docs/feature-management-experimentation/feature-management/set-the-default-treatment/): This topic provides detailed information on setting the default treatment.
  - [Set the alert baseline treatment](https://developer.harness.io/docs/feature-management-experimentation/feature-management/set-the-alert-baseline-treatment/): This topic provides detailed information on setting the alert baseline treatment.
  - [Control treatment](https://developer.harness.io/docs/feature-management-experimentation/feature-management/control-treatment/): This topic provides detailed information on a feature flag's control treatment.
  - [Default treatment](https://developer.harness.io/docs/feature-management-experimentation/feature-management/default-treatment/): This topic provides detailed information on a feature flag's default treatment.
  - [Use the kill switch](https://developer.harness.io/docs/feature-management-experimentation/feature-management/use-the-kill-switch/): This topic provides detailed information on using the kill switch for a feature flag.
  - [Reallocate](https://developer.harness.io/docs/feature-management-experimentation/feature-management/reallocate-traffic/): This topic provides detailed information about reallocating traffic for feature flags.
  - [Using flag sets to boost SDK performance](https://developer.harness.io/docs/feature-management-experimentation/feature-management/using-flag-sets-to-boost-sdk-performance/): This topic provides detailed information on using flag sets to boost SDK performance.
  - [Review customer dashboard](https://developer.harness.io/docs/feature-management-experimentation/feature-management/customer-dashboard/): This topic provides detailed information about the customer dashboard in Harness FME.
  - [Impressions](https://developer.harness.io/docs/feature-management-experimentation/feature-management/impressions/): This topic provides detailed information about impressions.
  - [Live tail](https://developer.harness.io/docs/feature-management-experimentation/feature-management/live-tail/): This topic provides detailed information about the Live Tail feature in Harness FME.
  - [Export data](https://developer.harness.io/docs/feature-management-experimentation/feature-management/export-data/): This topic provides detailed information about exporting data from Harness FME.
  - [How to upload CSV file that contains IDs with comma character to new segment?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/best-practices/csv-file-comma/): This topic provides best practices on uploading a CSV file that contains user IDs with comma characters to a new segment.
  - [Why setting the order of treatments matters](https://developer.harness.io/docs/feature-management-experimentation/feature-management/best-practices/why-setting-the-order-of-treatments-matters/): This topic provides detailed information about targeting rules and the order of treatments.
  - [Best practices when targeting an account or organization](https://developer.harness.io/docs/feature-management-experimentation/feature-management/best-practices/best-practices-when-targeting-an-account-or-organization/): This topic provides best practices on targeting a particular account or organization.
  - [Is the feature flag impression toggle supported by my SDK version?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/is-the-feature-flag-impression-toggle-supported): This topic provides detailed information about the feature flag impression tracking toggle.
  - [Does my SDK version support SemVer?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/does-my-sdk-version-support-semver/): This topic provides detailed information about targeting rules that use SemVer. 
  - [Dynamic configuration section does not show up](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/dynamic-configuration-section-does-not-show-up/): This topic provides detailed information about ensuring that the dynamic configuration section appears in Harness FME.
  - [How to delete a segment with all its keys?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/how-to-delete-a-segment-with-all-its-keys/): This topic provides detailed information about deleting a segment with all of its keys.
  - [How can you tell what treatment a user sees?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/how-can-you-tell-what-treatment-a-user-sees/): This topic provides detailed information about determining who is seeing which treatment.
  - [What is the difference between Default Rule and Default Treatment?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/what-is-the-difference-between-default-rule-and-default-treatment/): This topic provides detailed information about the difference between the default rule and default treatment.
  - [Can a Traffic Type be modified?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/can-a-feature-flags-traffic-type-be-modified/): This topic provides detailed information about modifying traffic types.
  - [Cannot delete feature flag from UI even after deleting the targeting rules](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/cannot-delete-feature-flag-from-ui-even-after-deleting-the-targeting-rules/): This topic provides detailed information about deleting a feature flag that exists in multiple environments.
  - [How do I maintain the state of a user's treatment, even if the rollout plan changes?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/how-do-i-maintain-the-state-of-a-users-treatment-even-if-the-rollout-plan-changes/): This topic provides detailed information about maintaining the state of a user's treatment.
  - [How does Harness FME ensure a consistent user experience?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/ensure-a-consistent-user-experience/): This topic provides detailed information about how Harness FME ensures a consistent user experience.
  - [Useful regex examples for targeting](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/useful-regex-examples-for-targeting/): This topic provides examples of useful regex for targeting.
  - [Is there a way to cap the number of users participating in an experiment?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/is-there-a-way-to-limit-the-number-of-users-in-an-experiment/): This topic provides detailed information about limiting the number of users participating in an experiment.
  - [How can I override individually targeted users with a superseding targeting rule?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/how-can-i-override-individually-targeted-users-with-a-superseding-targeting-rule/): This topic provides detailed information about overriding individual targeted users with a superseding targeting rule.
  - [Why are some user Ids double bucketed?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/why-are-some-users-double-bucketed/): This topic provides detailed information about why some user IDs are double bucketed.
  - [What are attributes in the Admin API vs custom attributes in targeting rules?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/what-are-attributes-in-the-admin-api-vs-custom-attributes-in-targeting-rules/): This topic provides detailed information about the difference in attributes in the Admin API and custom attributes in target rules.
  - [Why might the same user id get different treatments?](https://developer.harness.io/docs/feature-management-experimentation/feature-management/faqs/why-might-the-same-user-id-get-different-treatments/): This topic provides detailed information about why the same user ID may be shown different treatments.

- Experimentation
  - [Overview](https://developer.harness.io/docs/feature-management-experimentation/experimentation/overview): This topic provides an overview of Experimentation capabilities.
  - [Key Concepts](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/): This topic provides detailed information about key concepts used in Experimentation.
  - [Statistical significance](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/statistical-significance): This topic provides detailed information about statistical significance in Harness FME.
  - [P-value](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/p-value/): This topic provides detailed information about the p-value.
  - [Frequentist vs. Bayesian](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/frequentist-vs-bayesian/): This topic provides detailed information about the Frequentist and Bayesian testing methods.
  - [Sequential vs. Fixed horizon testing](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/fixed-horizon/): This topic provides detailed information about the sequential and fixed horizon testing frameworks.
  - [Multiple comparison correction (MCC)](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/multiple-comparison-correction/): This topic provides detailed information about the multiple comparison correction.
  - [Sample size calculator](https://developer.harness.io/docs/feature-management-experimentation/experimentation/key-concepts/sample-size-calculator/): This topic provides detailed information about experiment sensitivity and using the sample size calculators.
  - [Experimentation Setup](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/): This topic provides detailed information about creating an experiment.
  - [Experiment scope](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/experiment-scope/): This topic provides an overview of experiment scope.
  - [Experiment hypothesis](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/experiment-hypothesis/): This topic provides best practices on constructing an experiment hypothesis.
  - [Metric selection](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/metric-selection/): This topic provides detailed information on assigning metric types.
  - [Selecting key metrics](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/metric-selection/key-metrics/): This topic provides detailed information on selecting key metrics.
  - [Selecting guardrail metrics](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/metric-selection/guardrail-metrics/): This topic provides detailed information on selecting guardrail metrics.
  - [Selecting supporting metrics](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/metric-selection/supporting-metrics/): This topic provides detailed information on adding supporting metrics to an experiment.
  - [Experiment settings](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/experiment-settings/): This topic provides an overview of experiment settings which you can customize.
  - [Running an A/A test](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/a-a-testing/): This topic provides best practices on running an A/A test.
  - [Mutually exclusive experiments](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/mutually-exclusive-experiments/): This topic provides best practices on using dependencies to run mutually exclusive experiments.
  - [Anonymous and logged in users](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/anonymous-and-logged-in-users/): This topic provides best practices on successfully experimenting with anonymous and logged-in users.
  - [Power analysis](https://developer.harness.io/docs/feature-management-experimentation/experimentation/setup/power-analysis/): This topic provides an overview of power analysis in Harness FME.
  - [Experiment results](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/): This topic provides an overview of your experiment's results.
  - [Viewing experiment results](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/viewing-experiment-results/): This topic provides detailed information on viewing your experiment results.
  - [Understanding results](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/viewing-experiment-results/metrics-impact-cards/): This topic provides detailed information on understanding your metric results.
  - [Metric details and trends](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/viewing-experiment-results/metric-details-and-trends/): This topic provides detailed information about metric details and trends.
  - [Metric calculation schedule](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/viewing-experiment-results/metric-calculation-schedule/): This topic provides detailed information on the metric calculation schedule.
  - [Randomization and stickiness](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/viewing-experiment-results/randomization-and-stickiness/): This topic provides detailed information on implementing sticky treatments for an experiment.
  - [Analyzing experiment results](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/analyzing-experiment-results/): This topic provides detailed information on analyzing your experiment results.
  - [Sample ratio check](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/analyzing-experiment-results/sample-ratio-check/): This topic provides an overview of sample ratio checks in Harness FME.
  - [Health check](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/analyzing-experiment-results/health-check/): This topic provides detailed information about experiment health checks.
  - [Dimensional analysis](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/analyzing-experiment-results/dimensional-analysis): This topic provides detailed information on using dimensional analysis.
  - [Reallocating traffic](https://developer.harness.io/docs/feature-management-experimentation/experimentation/experiment-results/reallocate-traffic): This topic provides detailed information about reallocating traffic for feature flags.

- Release Monitoring
  - [Overview](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/overview/): This topic provides an overview of Release Monitoring capabilities.
  - [Quickstart](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/quickstart/): This topic provides a quickstart guide to Release Monitoring.
  - [Events](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/events/): This topic provides an overview of events in Release Monitoring.
  - [Events Setup](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/events/setup/): This topic provides detailed information about sending event data to Harness FME.
  - [Metrics](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/): This topic provides an overview of metrics in Release Monitoring.
  - [Metrics Setup](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/setup/): This topic provides detailed information about creating a metric in Harness FME.
  - [Metric capping](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/setup/capping): This topic provides detailed information about metric capping in Harness FME.
  - [Filtering your metrics](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/setup/filtering/): This topic provides detailed information about filtering metrics in Harness FME.
  - [Metric categorization](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/categories/): This topic provides an overview of metric categories in Harness FME.
  - [Guardrail metrics](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/categories/guardrail-metrics): This topic provides an overview of guardrail metrics.
  - [Statistical significance](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/metrics/statistical-significance): This topic provides detailed information about statistical significance in Harness FME.
  - [Attribution and exclusion](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/attribution-and-exclusion): This topic provides detailed information about attribution and exclusion in Harness FME.
  - [Alerts and Monitoring](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/): This topic provides detailed information about alerting and monitoring capabilities in Release Monitoring.
  - [Automated alerts and notifications](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/automated-alerts-and-notifications/): This topic provides detailed information about automated alerts and notifications in Release Monitoring.
  - [Alert policies](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/alert-policies/): This topic provides detailed information about creating metric alert policies in Harness FME.
  - [Monitoring window](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/alert-policies/monitoring-window/): This topic provides detailed information about the monitoring window in Harness FME.
  - [Set the alert baseline treatment](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/set-the-alert-baseline-treatment/): This topic provides detailed information about setting the alert baseline treatment in Harness FME.
  - [Traffic insights](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/traffic-insights/): This topic provides detailed information about traffic insights for treatments in Harness FME.
  - [View triggered alerts](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/view-triggered-alerts/): This topic provides detailed information about triggered alerts in Harness FME.
  - [Troubleshooting alerts](https://developer.harness.io/docs/feature-management-experimentation/release-monitoring/alerts/troubleshooting/): This topic provides detailed information about troubleshooting metric and feature flag alerts. 

- Management & Admin
  - [FME Settings](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/fme-settings/): This topic provides an overview of settings that you can customize in Harness FME.
  - [Account usage data](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-usage/): This topic provides detailed information about your account usage data in Harness FME.
  - [Permissions](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/fme-settings/permissions/): This topic provides an overview of available permissions in Harness FME.
  - [Approval flows](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/fme-settings/approval-flows/): This topic provides an overview of approval flows in Harness FME.
  - [Environments](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/fme-settings/environments/): This topic provides an overview of environments in Harness FME.
  - [Traffic types](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/fme-settings/traffic-types/): This topic provides an overview of traffic types and impressions in Harness FME.  
  - [Tags](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/tags/): This topic provides an overview of tags.
  - [Administration best practices](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/admin-best-practices/): This topic provides an overview of administrative best practices in Harness FME.
  - [MTK efficiency](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/admin-best-practices/mtk-efficiency/): This topic provides best practices on monthly tracking keys (MTK).
  - [Event efficiency](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/admin-best-practices/event-efficiency/): This topic provides detailed information on optimizing your events in Harness FME.
  - [Managing technical debt](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/admin-best-practices/managing-technical-debt/): This topic provides best practices on managing technical debt.
  - [Legacy Split Settings](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/): This topic provides an overview of settings that you can customize in Split (Legacy).
  - [Audit logs](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/audit-logs/): This topic provides an overview of audit logs in Split Legacy.
  - [API Keys](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/api-keys/): This topic provides an overview of API keys in Split SDKs and the Admin API.
  - [Groups](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/groups/): This topic provides an overview of groups in Split Legacy.
  - [Users](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/users/): This topic provides an overview of managing users in Split Legacy.
  - [Projects](https://developer.harness.io/docs/feature-management-experimentation/management-and-administration/account-settings/projects/): This topic provides an overview of managing projects in Split Legacy.

- Integrations
  - [Amazon S3](https://developer.harness.io/docs/feature-management-experimentation/integrations/amazon-s3): This topic provides detailed information about the FME Amazon S3 integration.
  - [Amplitude](https://developer.harness.io/docs/feature-management-experimentation/integrations/amplitude): This topic provides detailed information about the FME Amplitude integration.
  - [AppDynamics](https://developer.harness.io/docs/feature-management-experimentation/integrations/appdynamics): This topic provides detailed information about the FME AppDynamics integration.
  - [Azure DevOps](https://developer.harness.io/docs/feature-management-experimentation/integrations/azure-devops): This topic provides detailed information about the FME Azure DevOps integration.
  - [BugSnag](https://developer.harness.io/docs/feature-management-experimentation/integrations/bugsnag): This topic provides detailed information about the FME BugSnag integration.
  - [Cloudflare Workers](https://developer.harness.io/docs/feature-management-experimentation/integrations/cloudflare-workers): This topic provides detailed information about the FME Cloudflare Workers integration.
  - [Datadog](https://developer.harness.io/docs/feature-management-experimentation/integrations/datadog): This topic provides detailed information about the FME Datadog integrations.
  - [Dynatrace](https://developer.harness.io/docs/feature-management-experimentation/integrations/dynatrace): This topic provides detailed information about the FME Dynatrace integration.
  - [FullStory](https://developer.harness.io/docs/feature-management-experimentation/integrations/fullstory): This topic provides detailed information about the FME FullStory integration.
  - [GitHub Actions](https://developer.harness.io/docs/feature-management-experimentation/integrations/github-actions): This topic provides detailed information about the FME GitHub Actions integration.
  - [Google Analytics 4 (GA4)](https://developer.harness.io/docs/feature-management-experimentation/integrations/google-analytics): This topic provides detailed information about the FME Google Analytics (GA4) integration.
  - [Google Tag Manager](https://developer.harness.io/docs/feature-management-experimentation/integrations/google-tag-manager): This topic provides detailed information about the FME Google Tag Manager integration.
  - [Grafana](https://developer.harness.io/docs/feature-management-experimentation/integrations/grafana): This topic provides detailed information about the FME Grafana integration.
  - [Heap](https://developer.harness.io/docs/feature-management-experimentation/integrations/heap): This topic provides detailed information about the FME Heap integration.
  - [Jenkins](https://developer.harness.io/docs/feature-management-experimentation/integrations/jenkins): This topic provides detailed information about the FME Jenkins integration.
  - [Jira Cloud](https://developer.harness.io/docs/feature-management-experimentation/integrations/jira-cloud): This topic provides detailed information about the FME Jira Cloud integration.
  - [Mixpanel](https://developer.harness.io/docs/feature-management-experimentation/integrations/mixpanel): This topic provides detailed information about the FME Mixpanel integration.
  - [mParticle](https://developer.harness.io/docs/feature-management-experimentation/integrations/mparticle): This topic provides detailed information about the FME mParticle integration.
  - [New Relic](https://developer.harness.io/docs/feature-management-experimentation/integrations/new-relic): This topic provides detailed information about the FME New Relic integration.
  - [PagerDuty](https://developer.harness.io/docs/feature-management-experimentation/integrations/pagerduty): This topic provides detailed information about the FME PagerDuty integration.
  - [Papertrail](https://developer.harness.io/docs/feature-management-experimentation/integrations/papertrail): This topic provides detailed information about the FME Papertrail integration.
  - [Quantum Metric](https://developer.harness.io/docs/feature-management-experimentation/integrations/quantummetric): This topic provides detailed information about the FME Quantum Metric integration.
  - [Rollbar](https://developer.harness.io/docs/feature-management-experimentation/integrations/rollbar): This topic provides detailed information about the FME Rollbar integration.
  - [Segment](https://developer.harness.io/docs/feature-management-experimentation/integrations/segment): This topic provides detailed information about the FME Segment integration.
  - [Sentry](https://developer.harness.io/docs/feature-management-experimentation/integrations/sentry): This topic provides detailed information about the FME Sentry integration.
  - [ServiceNow](https://developer.harness.io/docs/feature-management-experimentation/integrations/servicenow): This topic provides detailed information about the FME ServiceNow integration.
  - [SessionCam](https://developer.harness.io/docs/feature-management-experimentation/integrations/sessioncam): This topic provides detailed information about the FME SessionCam integration.
  - [Slack](https://developer.harness.io/docs/feature-management-experimentation/integrations/slack): This topic provides detailed information about the FME Slack integration.
  - [Sumo Logic](https://developer.harness.io/docs/feature-management-experimentation/integrations/sumologic): This topic provides detailed information about the FME Sumo Logic integration.
  - [Terraform provider](https://developer.harness.io/docs/feature-management-experimentation/integrations/terraform): This topic provides detailed information about the FME Terraform Provider integration.
  - [Vercel](https://developer.harness.io/docs/feature-management-experimentation/integrations/vercel): This topic provides detailed information about the FME Vercel integration.
  - [Visual Studio Code extension](https://developer.harness.io/docs/feature-management-experimentation/integrations/visual-studio-code-extension): This topic provides detailed information about the FME Visual Studio Code extension integration.
